Run:
---
1.) npx create-react-app my-app
2.) npm start

Directory:
---------
1. This is all just js.
2. Index.js is the first line that is run.
3. React + ReactDom -> React.
4. App.js -> Where all the components combine.
5. Javascript is imperative clear step by step instructions.
6. React is declarative.

Components:
-----------
1. A component in React is just a JS fn.
2. {} -> used to run basic JS expressions.
3. Props :
    In component simply put PropName={PropValue}
    In the particular component this could be accessed as fnName(prop){ {prop.ValName} }
    {} when we are using variables, hard coded value could also be declared as PropName = "Name"
4. toLocaleString('CountryCode',{month:'long'})

Splitting Components:
--------------------
1. A particular part of code of a component could be put in a diff component and then imported here in it.

Composition:
------------
1. Building up from smaller components.
2. We acc to the norm setup a card.js component for bg styling.
3. But in react we just can't simply use custom components to wrap around other components.
4. Children prop is used here hence.
5. return <div className='card'>{props.children}</div>
6. This is a reserved one, and is implicitly passed.
7. Now the classes couldn't be just added to custom components as in the case of jsx elements.
8. Hence here this is done as: 
9. Adding classes to children of wrapping components
    function Card(props) {
        const classes = 'card' + props.className
        <div className={classes}>{props.children}</div>
    }
10. Transforming to arrow fn. :: 
    function APP(){} == const App = ()=>{}