States:
-------
1) State types:
    a) Local
    b) Cross Component
    c) App wide

2) Redux vs React Context: npm install redux react-redux
    1) Context has some disadvantage:
        A) Becomes complex in bigger apps.
        B) Suitable for low frequency updates.

3) Working of Redux:
    1) There's one central data store.
    2) Components subscribe to this CDS, and whenever there's a change CDS notifies them.
    3) Components do not directly manipulate data in CDS, we've a downward stream only.
    4) Reducer fn mutates the CDS content.
    5) Componenets trigger actions which leads to Reducer, and then it alters the CDS.

            fwd->
        ------------Reducer
        |              |mutates
        |              | 
      Action          CDS
        |              |
        |              |subs
        ------------Component
        <-Dispatch



ReduxCore:
----------
Meta:
++++
1.  Basically here we make an object of the createStore() class and thus provide it with a fn, thereby declaring default state and coding
    conditional behavior based on the value of action passed.
2.  This basically instantiates the stuff for us, further we create a custom fn to run any time a change is detected in the store's state
    and pass it into subscribe method of the object of createStore() class.
3.  And now this is run every time there's a state change.
4.  Store.dispatch is used to perform a particular behavior on state that has already been defined in the instantiating fn of the createStore
    class's object.

1) npm install redux //main implementation however to connect it with react we use a helper// react-redux .
2) Reducer fn: args(OldState,DispatchedAction)->op(NewStateObject)

3) 

    cosnt redux = require('redux');//when run in node in reacct its colliqual: import redux from 'redux';

    const countReducer = (state={counter:0},action) => {
        if(action.type==='increment')
        {   
            return {
            counter: state.counter+1;
            }
        }
        //This will be the case during intialization, as well as wildCard options.
        //returns default provided state.
        return state;
    }

    const store = redux.createStore(countReducer);
   
    ------------This part is used in proj-----------
    export default store;
    ------------------------------------------------
    It is the compoents of the react that subscribe and dispatch stuff to store.
   
    const counterSubscriber = () =>
    {
        const latestState = store.getState();
        console.log(latestState);
    }

    //here reducer will run counterSubscriber everytime data in CDS altered.
    store.subscribe(counterSubscriber);

    //On code execution counter subscriber will be executed for the dispatched action.
    store.dispatch({type: 'increment'});
    //runs the reducer which is a simple fn with just one return.


ProvidingRedux to React
-----------------------
1. In app.js file:
    import {Provider} from 'react-redux';
    import store from './store/index';

    ReactDOM.render(
        <Provider store={store}>
            <App/>
        </Provider>,
        document.getElementById('root)
    );

Using Redux Data in components:
-------------------------------
1. In component file:
    import {useSelector} from 'redux';

    //Inside component fn:
    const counter = useSelector(state => state.counter);
    //Now a subscription will automatically be created, and our component
    //would recieve the latest counter value.

    //if the component is dismounted, redux will automatically unsubscribe.

Dispatching From Componenets
----------------------------
1. Created such buttons.
    import {useSelector,useDispatch} from 'redux-redux';

    //In component fn:
    //In button's onClick-> addFn handlers;
    1. create an objet of useDispatch(); class
    const dispatch = useDispatch();
    2. Now from the handler fns wired in the buttons make dispatch calls:
        
        const incrementHandler=()=>{
            dispatch({type:'increment'});
        };

Adding Payloads in Dispatches:
------------------------------
1. It's just simply added in the fn call and accessed using action.propName 
    const incrementHandler=()=>
            {
                dispatch({type:'increment',amount: 10});
            };
action.amount

##WE DO NOT CHANGE EXISTING STATE, AWLAYS RETURN A NEW VALUE.
 Multiple state values are added to the reducer using the curly braces notation.
 state = {state1,state2};

Redux TOOLKIT:
--------------
Meta: CreateStore part is kinda same for now, but now the reducer fn has been created using createSlice.
      Even subscribe and other paradigms just work the same way as before.
      Since here the reducer fn is passed to the createStore class, during object instantiation, thus to handle more than
      one slice we use configure store fn.


1. npm install @reduxjs/toolkit 
2. import (creatSlice) from '@reduxjs/toolkit';
3. To maintain different compoents of states.
4. In the main store->index.js
5. We created slices of states, which aren't related.
6. We can skip the boiler plate of all those explicit if statements.
7. We can mutate state here internally which would be interpreted as old way of creating new state.
8. Here we can mutate the states directly which in turn is treated the right way under the hood.

createSlice({
    name: 'counter',
    intialState,//const consisting of states defined above
    reducers: {
        increment(state){};
        decrement(State){};
    }
})

Connecting this to main aPP:
-----------------------------
1. Make slice's value stored in a const, and in createStore(counterSlice.reducers).
2. Basically what slices actually do is they provide modularity to include multiple states in just one.
    For this we import configureStore() -> now instead of createStore we'll use this.
    Accepts an object, and reducer: counterSlice.reducers //main global reducer
    In case if there are more than one, then we define an object form of it, as
    { reducer: {counter: counterSlice.reducer ..etc}} -> this will behind the scene create all of these reducers combined single reducer.


Dispatching actions using Redux Toolkit:
----------------------------------------
1. Here since we are not using explicit if statements, thus we get a unique action object created by the redux Toolkit,
   and this can be done using counterSlice.actions.toggleCounter // a unique action generated, which will call the reducer of the same name.
2. We create actions and then export besides default for the actions, and these are thus alongwith store imported in the component we
    need them for.
3. Export them from the store as:
    export const counterActions = counterSlice.actions;

    now in the component file:
    import {counterActions} from '../store/index';

    dispatch(counterActions.increment(x)); 
    //same as passing stuff earlier using dispatch as if conditionals
    //x is accessed using action.payload notation. 

Multiple States:
----------------
1. createSlice -<> name='auth' ->intialState: intialAuthState, reducers: {}
2. useSelector is used to select a particular state from the redux store.

Advanced Redux:
--------------
1) Reducers should be pure, side-effect free, synchronous fn.
2) Even useReducer hook has the same property.
3) start from advance redux.
4) Don't ever run asynchronous code in redux fns.
5) Rather there are 2 diff ways for this namely:
    a) Component
    b) Action Creators

a)Inside Componenets  
    6) We at the final call used a useSate at the app.js level and as a dependency we added 
        cart whose store slice we used in useState's dependency.    
    7) Since here we were sending the entire cart state thus we used the PUT request so as to 
        alter the part which have been changed, instead of the entire cart.
    8) Here behind the hood action creator is creating objects which are being dispatched.

b) Action Creators
    Thunk: a fn with a delayed response.
    We create an action creator fn  as a thunk which doesn't immidiately
    return the action object but a fn which later does the part.
    WorkFlow:
    Here we selected cart state in app.js, in useEffect as dependency too.
    From here we dispatched sendCartData(cart)
    Which in turn got triggered at the cart-slice store.
    Here we created a thunk action creator, which accepts the cart as argument.
    From here we returned an asynchronous anonymous fn.
    Which intially dispatches pending notification.
    Then we created yet another async fn, which contains the fetch logic, and throws an error
    when response status is not ok.
    Now we ran this fn in a try block, await prefixed, and dispatched success in the try block.
    And in the error block we dispatched our error.