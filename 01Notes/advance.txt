Hooks
-------
1) Used to make components dynamic.
2) Denoted by use* initals.

useState
---------
1) Named export, needs be imported by exact name, it's a function.
2) It's a fn that returns an array of states and a funcion, which'd be used to control the value of state.
3) To access values of array, we'd need to provide some default value as argument to useState(1)[0];
4) General convention: const[text,setText] = useState('random Title')
5) The component name should start with a capital letter.
6) hook needs be in the fn body.

Getting the value previously set state:
--------------------------------------
1) When we cal the setter fn using the usual notation, we get to change the value stored previously by just one,
->setValue(value+1): increments, but doesn't take delayed response.
->setValue((prevState))=>{return prevState+1}: every time gets the persisting value.//prevState is just a alias, could be named anything.
2) Both of these notations could be used on contingency.


useEffect:
----------
1) Hook used to deal with work outside the components.
2) Title changing, data fetch etc.
3) Is called everytime render is called.
4) Hooks can't be placed in conditionals but they could be implemented under the hook body.
5) Second argument: array: [] empty array to just to run the useEffect on intial render.
6) [value] : now it'd render everytime the value is changed.
7) [] : contains the dependency lists.
8) Adding event listeners using useEffect needs to be checked so that it just dooesn't continue to add it.
9) Should remove the event listener after it is called again.
10) []: could be used if there's just one eventListener that's to be added.
11) To remove the added listener, we use a cleanup fn which we return using return statement of the fn.

Fetching Data using useEffect:
------------------------------
1) We cannot make it async-await, for this we'll need to wrap the hook in a fn.
2) We need to provide a init state empty arrray to circumvent infinite loop of rendering of useEffect hook.
3) getUsers is a fn to get the fetched data with async-await functionality.
4) It is called from the useEffect hook given that it runs on every rerender. 

Forms
-----
1) Input tag is used as usual like in html, prevent dfault circumvents the default behavior, that is refreshing  the form 
   after submission.
2) EventPArameter.preventDefault();
3) Submission paradigms: 1)onSubmit={handleSubmit}->added in form-> handleSubmit is a user defined fn, which has the option of EventPArameter.
                         2)onClick={handleSubmit}-> added in submit button
                         3) The event parameter in user defined fn makes available to the wide options available.
4) useState is used as avalue in input field and is changed using the set fn available with it.
5) And this change is realized as:
    1) value={firstName}
    2) onChange={(e)=>setFirstName(e.target.value)}
6) Default html behavior makes the form to be submitted everytime a refresh is hit, which is an event of common occurrence in react, 
   also that the default behavior of button is submit. as exp,lained:
    Buttons like <button>Click to do something</button> are submit buttons.
    Set type="button" to change that. type="submit" is the default.
7) For a multiple input form we use an object of the type and update its values using dynamic properties of JS.
   setPerson({...person, [name]: value});name and values are discerned by EventPArameter.target.name/value.
8) For submit we'll check all the values for not being null{register not redaction}.

useRef:
------
1) Alot like useState, preserves values b/w renders.
2) Doesn't trigger re render.
3) Targets Dom elements.
4) useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). 
   The returned object will persist for the full lifetime of the component.

useReducer:
-----------
variation of basic ones/edge cases use
1) index.js is the main entry point of any directory.
2) Basically it's just a variation of useState, so just a more sophisticaated way of structuring the code.
      const [state, dispatch] = useReducer(reducer, initialState);
      
      function reducer(state, action) {
         switch (action.type) {
           case 'increment':
             return {count: state.count + 1};
           case 'decrement':
             return {count: state.count - 1};
           default:
             throw new Error();
         }
      }
3) The dispatch fn under the hood acts on reducer. It passes the given input as an object to the reducer, so we're not
   directly affecting state as in the case of useState, where we directly used setState fn.
4) To handle uncatched events we could either return state or more sophisticated error using throw new error

propDrilling
-------------
1) Not an official term.
2) Useful when state has to be passed in a big context tree.
3) Idea behind this concept is that we need to pass a fn to some component which is deeply nested and can't just directly be passed
   with the functionality.
4) Ultimately it'll be passed through the components in the layer.
5) This nightmarish phenomenon could be circumvented by using context API/ context Hook.

useContext
----------
1) const PersonContext = React.createContext();
2) <PersonContext.provider value='something'>
   </PersonContext.provider>
   This will wrap the entire application inside return.
4) Now the value that we provided could be accessed just by using: useContext(PersonContext);

customHooks
-----------
1) User built custom hooks.
2) The one used here returns fetched data from the given url.
3) Name needs to be started with use, and export would consist of variable and its setter.

Advanced React
--------------

Prop Types
----------
1) If there's some data inconsistency we'll get a broken app behavior.
2) If such error is encountered and we've got no clue why is it so, just remove component's fields which 
   employ the api data, and console log them.
3) But to be more specific about the field the problem stems from, we use PropTypes.
 Product.propTypes = {
    image: PropTypes.object.isRequired,
    --- for all the fields
 }

 Dealing with inconsistent Props:
 -----------------------------------
 1) Default props: 
   
   Product.defaultProps = {
       all the fields: 'default-values',
      .
      .
      .
   }
   But this way would cause issues in the case if image is accessed using url, and default value is non comprised
   of url.
   To deal with this we define a variable url seperately.
   url = image && image.url;-> now url would only be checked if image is available on the api call.
   url || defaultImage

React-router
------------
1) We aim to achieve least rendering in skipping pages and that is aachieved by using routers.
2) React naively doesn't have a default routing system.
3) Basically we create a router tag and within it we include the component we're defining as our route.
4) Basically this component would be returned at the enlisted route.
   <Router>
      <Route path="/">
         <component/>
      </Route>
   </Router>
5) We need to add exact path="/" , otherwise all the routes with matching even just one char, would be displayed.
6) To deal with this isse we use swtch, here only the exactly matching route would be activated.
7) Non changing react components are placed in the route at the top.
8) as <Navbar>
9) Parameters to url are added using /person/:id as:
   <Route path="/person/:id" children={<Person>}><Route>
   And this will be fetched as:
   <Link to={'/person/${person.id}'}> LinkName </Link>
10) useParams: hook provided by react router.
12) Caveat! the params passed using urls are strings, and in find operations we got to use them as int, for the same
    type conversions are done.
    parseInt(string_thing);

Performance Optimization:
-------------------------
1) Only for complex cases of project devs.

Memoization
------------
1) Storing data for the contingency of re rendering behavior
   of the implicit components on detection of changes in parent 
   component.
2) The memo function here memoizes that it ain't the prop in question
   that has been changed, and hence saves recursive fn calls.

useCallBack
-----------

1) With Memoization we dealt with the var type props, but for the props which are functions,
   and when their state is changed, that state change triggers a recreation of method that we passed as prop.
2) Now this makes react guess that this way props has been changed, as new fn has been created.
3) To circumvent this issue we use useCallBack hook.
4) Here too we wrap the fn inside hook, and pass a dependency array.

5) useCallBack could be used to circumvent the conditions where addn of full dependencies would create a infinite loop,
   with useCallBack it ensures and puts a duress for the component to change only on the specified dependencies.
useMemo
-------
1) Used for external fns which are triggered everytime, use memo stores the value and only computes for the case,
   when the provided dependencies change.
